/* webui.vapi generated by valac 0.26.2, do not modify. */

namespace WebUI {
	[CCode (cheader_filename = "webui.h")]
	public class Button : WebUI.Widget, WebUI.MouseEvents {
		public Button (WebUI.View view, string? id = null);
		public override string jsui_code ();
		public override string render ();
		public signal void clicked ();
	}
	[CCode (cheader_filename = "webui.h")]
	public class Connection : GLib.Object {
		protected static int _nxt_id;
		protected WebUI.View _view;
		public Connection (Neutron.Websocket.Connection? conn, string route);
		public void exec (string code);
		protected static int next_id ();
		public void on_message (string message, Neutron.Websocket.Connection conn);
		public void request (string what, WebUI.Request.finished_cb fun);
		public void response (int id, string val);
		public int id { get; private set; }
		public Gee.ArrayList<WebUI.Request> requests { get; private set; }
		public string route { get; set construct; }
		public Neutron.Websocket.Connection? socket { get; construct; }
		public WebUI.View view { get; set; }
		public Gee.HashMap<string,WebUI.View> views { get; private set; }
	}
	[CCode (cheader_filename = "webui.h")]
	public class DumbStruct {
		public WebUI.Service.connection_func func;
		public DumbStruct (WebUI.Service.connection_func fun);
	}
	[CCode (cheader_filename = "webui.h")]
	public class Graph : WebUI.Widget {
		public Graph (WebUI.View view, string? id = null);
		public override string jsui_code ();
		public override string render ();
	}
	[CCode (cheader_filename = "webui.h")]
	public class Range : WebUI.Widget {
		public Range (WebUI.View view, string? id = null);
		public override string jsui_code ();
		public override string render ();
		public signal void changed (int min, int max);
	}
	[CCode (cheader_filename = "webui.h")]
	public class Request {
		public delegate void finished_cb (string data);
		public bool active;
		public WebUI.Request.finished_cb func;
		public int id;
		public string? result;
		public Request (int id, WebUI.Request.finished_cb fun);
		public void complete (string res);
	}
	[CCode (cheader_filename = "webui.h")]
	public class Service : GLib.Object {
		[CCode (has_target = false)]
		public delegate void connection_func (WebUI.Connection conn);
		public Service (uint port, string? data_dir = null);
		public WebUI.Connection get_connection (int id);
		public string get_mime_type (string ext);
		public void handle (Neutron.Http.Request request, Neutron.Http.EntitySelectContainer container);
		protected void on_socket (string route, Neutron.Http.EntitySelectContainer container);
		public string render_libwebui (string route);
		public void route (string path, WebUI.Service.connection_func fun);
		public string[]? serve (owned string path);
		public Gee.HashMap<int,WebUI.Connection> connections { get; private set; }
		public string data_dir { get; construct; }
		public uint port { get; construct; }
		public Gee.HashMap<string,WebUI.DumbStruct> routes { get; private set; }
		public Neutron.Http.Server server { get; private set; }
	}
	[CCode (cheader_filename = "webui.h")]
	public class Slider : WebUI.Widget {
		public Slider (WebUI.View view, string? id = null);
		public override string jsui_code ();
		public override string render ();
		public signal void changed (int val);
	}
	[CCode (cheader_filename = "webui.h")]
	public class Switch : WebUI.Widget {
		public Switch (WebUI.View view, string? id = null);
		public override string jsui_code ();
		public override string render ();
		public signal void changed (bool val);
	}
	[CCode (cheader_filename = "webui.h")]
	public class View : GLib.Object, WebUI.HTML, WebUI.EventTarget {
		protected static int _nxt_id;
		public View (WebUI.Connection conn, string id);
		public void add (WebUI.Widget w);
		public WebUI.Widget? get_widget (string id);
		public bool has_widget (string id);
		public void initialize ();
		protected static int next_id ();
		public void own (WebUI.Widget w);
		public WebUI.Widget[] children { get; private set; }
		public WebUI.Connection connection { get; set construct; }
		public string? id { get; construct; }
		public WebUI.Widget[] widgets { get; private set; }
	}
	[CCode (cheader_filename = "webui.h")]
	public class Widget : GLib.Object, WebUI.HTML, WebUI.EventTarget {
		public Widget (WebUI.View view, string? id = null);
		public string get_style_property (string name);
		public virtual string jsui_code ();
		public void read_property (string prop);
		public virtual string render ();
		protected void set_container (WebUI.Container container);
		public void set_style_property (string name, string val);
		public string style (string name, owned string? val = null);
		public void write_string_property (string prop, string val);
		public string id { get; construct; }
		public WebUI.Container? parent { get; private set; }
		public WebUI.Connection? socket { get; construct; }
		public WebUI.View view { get; construct; }
	}
	[CCode (cheader_filename = "webui.h")]
	public interface Container : WebUI.Widget {
		public virtual void add (WebUI.Widget w);
	}
	[CCode (cheader_filename = "webui.h")]
	public interface EventTarget : GLib.Object {
		public virtual void emit (string evt, string? data = null);
		public signal void event (WebUI.EventType event, string? data = null);
	}
	[CCode (cheader_filename = "webui.h")]
	public interface HTML {
		public virtual string render ();
	}
	[CCode (cheader_filename = "webui.h")]
	public interface MouseEvents : WebUI.Widget {
		public virtual void attach_mouse_events ();
		public signal void mouse_down ();
		public signal void mouse_up ();
	}
	[CCode (cheader_filename = "webui.h")]
	public enum EventType {
		UNSUPPORTED,
		CLICKED,
		MOUSE_UP,
		MOUSE_DOWN,
		ACTIVATE,
		CHANGED;
		public static WebUI.EventType from_string (string name);
	}
	[CCode (cheader_filename = "webui.h")]
	public const string VERSION;
}
