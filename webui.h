/* webui.h generated by valac 0.26.2, the Vala compiler, do not modify */


#ifndef __WEBUI_H__
#define __WEBUI_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <neutron.h>
#include <gee.h>

G_BEGIN_DECLS


#define WEB_UI_TYPE_WIDGET (web_ui_widget_get_type ())
#define WEB_UI_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WEB_UI_TYPE_WIDGET, WebUIWidget))
#define WEB_UI_WIDGET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WEB_UI_TYPE_WIDGET, WebUIWidgetClass))
#define WEB_UI_IS_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WEB_UI_TYPE_WIDGET))
#define WEB_UI_IS_WIDGET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WEB_UI_TYPE_WIDGET))
#define WEB_UI_WIDGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WEB_UI_TYPE_WIDGET, WebUIWidgetClass))

typedef struct _WebUIWidget WebUIWidget;
typedef struct _WebUIWidgetClass WebUIWidgetClass;

#define WEB_UI_TYPE_MOUSE_EVENTS (web_ui_mouse_events_get_type ())
#define WEB_UI_MOUSE_EVENTS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WEB_UI_TYPE_MOUSE_EVENTS, WebUIMouseEvents))
#define WEB_UI_IS_MOUSE_EVENTS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WEB_UI_TYPE_MOUSE_EVENTS))
#define WEB_UI_MOUSE_EVENTS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), WEB_UI_TYPE_MOUSE_EVENTS, WebUIMouseEventsIface))

typedef struct _WebUIMouseEvents WebUIMouseEvents;
typedef struct _WebUIMouseEventsIface WebUIMouseEventsIface;

#define WEB_UI_TYPE_HTML (web_ui_html_get_type ())
#define WEB_UI_HTML(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WEB_UI_TYPE_HTML, WebUIHTML))
#define WEB_UI_IS_HTML(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WEB_UI_TYPE_HTML))
#define WEB_UI_HTML_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), WEB_UI_TYPE_HTML, WebUIHTMLIface))

typedef struct _WebUIHTML WebUIHTML;
typedef struct _WebUIHTMLIface WebUIHTMLIface;

#define WEB_UI_TYPE_EVENT_TARGET (web_ui_event_target_get_type ())
#define WEB_UI_EVENT_TARGET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WEB_UI_TYPE_EVENT_TARGET, WebUIEventTarget))
#define WEB_UI_IS_EVENT_TARGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WEB_UI_TYPE_EVENT_TARGET))
#define WEB_UI_EVENT_TARGET_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), WEB_UI_TYPE_EVENT_TARGET, WebUIEventTargetIface))

typedef struct _WebUIEventTarget WebUIEventTarget;
typedef struct _WebUIEventTargetIface WebUIEventTargetIface;
typedef struct _WebUIWidgetPrivate WebUIWidgetPrivate;

#define WEB_UI_TYPE_BUTTON (web_ui_button_get_type ())
#define WEB_UI_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WEB_UI_TYPE_BUTTON, WebUIButton))
#define WEB_UI_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WEB_UI_TYPE_BUTTON, WebUIButtonClass))
#define WEB_UI_IS_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WEB_UI_TYPE_BUTTON))
#define WEB_UI_IS_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WEB_UI_TYPE_BUTTON))
#define WEB_UI_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WEB_UI_TYPE_BUTTON, WebUIButtonClass))

typedef struct _WebUIButton WebUIButton;
typedef struct _WebUIButtonClass WebUIButtonClass;
typedef struct _WebUIButtonPrivate WebUIButtonPrivate;

#define WEB_UI_TYPE_VIEW (web_ui_view_get_type ())
#define WEB_UI_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WEB_UI_TYPE_VIEW, WebUIView))
#define WEB_UI_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WEB_UI_TYPE_VIEW, WebUIViewClass))
#define WEB_UI_IS_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WEB_UI_TYPE_VIEW))
#define WEB_UI_IS_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WEB_UI_TYPE_VIEW))
#define WEB_UI_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WEB_UI_TYPE_VIEW, WebUIViewClass))

typedef struct _WebUIView WebUIView;
typedef struct _WebUIViewClass WebUIViewClass;

#define WEB_UI_TYPE_SLIDER (web_ui_slider_get_type ())
#define WEB_UI_SLIDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WEB_UI_TYPE_SLIDER, WebUISlider))
#define WEB_UI_SLIDER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WEB_UI_TYPE_SLIDER, WebUISliderClass))
#define WEB_UI_IS_SLIDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WEB_UI_TYPE_SLIDER))
#define WEB_UI_IS_SLIDER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WEB_UI_TYPE_SLIDER))
#define WEB_UI_SLIDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WEB_UI_TYPE_SLIDER, WebUISliderClass))

typedef struct _WebUISlider WebUISlider;
typedef struct _WebUISliderClass WebUISliderClass;
typedef struct _WebUISliderPrivate WebUISliderPrivate;

#define WEB_UI_TYPE_SWITCH (web_ui_switch_get_type ())
#define WEB_UI_SWITCH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WEB_UI_TYPE_SWITCH, WebUISwitch))
#define WEB_UI_SWITCH_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WEB_UI_TYPE_SWITCH, WebUISwitchClass))
#define WEB_UI_IS_SWITCH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WEB_UI_TYPE_SWITCH))
#define WEB_UI_IS_SWITCH_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WEB_UI_TYPE_SWITCH))
#define WEB_UI_SWITCH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WEB_UI_TYPE_SWITCH, WebUISwitchClass))

typedef struct _WebUISwitch WebUISwitch;
typedef struct _WebUISwitchClass WebUISwitchClass;
typedef struct _WebUISwitchPrivate WebUISwitchPrivate;

#define WEB_UI_TYPE_RANGE (web_ui_range_get_type ())
#define WEB_UI_RANGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WEB_UI_TYPE_RANGE, WebUIRange))
#define WEB_UI_RANGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WEB_UI_TYPE_RANGE, WebUIRangeClass))
#define WEB_UI_IS_RANGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WEB_UI_TYPE_RANGE))
#define WEB_UI_IS_RANGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WEB_UI_TYPE_RANGE))
#define WEB_UI_RANGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WEB_UI_TYPE_RANGE, WebUIRangeClass))

typedef struct _WebUIRange WebUIRange;
typedef struct _WebUIRangeClass WebUIRangeClass;
typedef struct _WebUIRangePrivate WebUIRangePrivate;

#define WEB_UI_TYPE_GRAPH (web_ui_graph_get_type ())
#define WEB_UI_GRAPH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WEB_UI_TYPE_GRAPH, WebUIGraph))
#define WEB_UI_GRAPH_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WEB_UI_TYPE_GRAPH, WebUIGraphClass))
#define WEB_UI_IS_GRAPH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WEB_UI_TYPE_GRAPH))
#define WEB_UI_IS_GRAPH_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WEB_UI_TYPE_GRAPH))
#define WEB_UI_GRAPH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WEB_UI_TYPE_GRAPH, WebUIGraphClass))

typedef struct _WebUIGraph WebUIGraph;
typedef struct _WebUIGraphClass WebUIGraphClass;
typedef struct _WebUIGraphPrivate WebUIGraphPrivate;

#define WEB_UI_TYPE_REQUEST (web_ui_request_get_type ())
#define WEB_UI_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WEB_UI_TYPE_REQUEST, WebUIRequest))
#define WEB_UI_REQUEST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WEB_UI_TYPE_REQUEST, WebUIRequestClass))
#define WEB_UI_IS_REQUEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WEB_UI_TYPE_REQUEST))
#define WEB_UI_IS_REQUEST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WEB_UI_TYPE_REQUEST))
#define WEB_UI_REQUEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WEB_UI_TYPE_REQUEST, WebUIRequestClass))

typedef struct _WebUIRequest WebUIRequest;
typedef struct _WebUIRequestClass WebUIRequestClass;
typedef struct _WebUIRequestPrivate WebUIRequestPrivate;

#define WEB_UI_TYPE_CONNECTION (web_ui_connection_get_type ())
#define WEB_UI_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WEB_UI_TYPE_CONNECTION, WebUIConnection))
#define WEB_UI_CONNECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WEB_UI_TYPE_CONNECTION, WebUIConnectionClass))
#define WEB_UI_IS_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WEB_UI_TYPE_CONNECTION))
#define WEB_UI_IS_CONNECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WEB_UI_TYPE_CONNECTION))
#define WEB_UI_CONNECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WEB_UI_TYPE_CONNECTION, WebUIConnectionClass))

typedef struct _WebUIConnection WebUIConnection;
typedef struct _WebUIConnectionClass WebUIConnectionClass;
typedef struct _WebUIConnectionPrivate WebUIConnectionPrivate;

#define WEB_UI_TYPE_DUMB_STRUCT (web_ui_dumb_struct_get_type ())
#define WEB_UI_DUMB_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WEB_UI_TYPE_DUMB_STRUCT, WebUIDumbStruct))
#define WEB_UI_DUMB_STRUCT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WEB_UI_TYPE_DUMB_STRUCT, WebUIDumbStructClass))
#define WEB_UI_IS_DUMB_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WEB_UI_TYPE_DUMB_STRUCT))
#define WEB_UI_IS_DUMB_STRUCT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WEB_UI_TYPE_DUMB_STRUCT))
#define WEB_UI_DUMB_STRUCT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WEB_UI_TYPE_DUMB_STRUCT, WebUIDumbStructClass))

typedef struct _WebUIDumbStruct WebUIDumbStruct;
typedef struct _WebUIDumbStructClass WebUIDumbStructClass;
typedef struct _WebUIDumbStructPrivate WebUIDumbStructPrivate;

#define WEB_UI_TYPE_SERVICE (web_ui_service_get_type ())
#define WEB_UI_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WEB_UI_TYPE_SERVICE, WebUIService))
#define WEB_UI_SERVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WEB_UI_TYPE_SERVICE, WebUIServiceClass))
#define WEB_UI_IS_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WEB_UI_TYPE_SERVICE))
#define WEB_UI_IS_SERVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WEB_UI_TYPE_SERVICE))
#define WEB_UI_SERVICE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WEB_UI_TYPE_SERVICE, WebUIServiceClass))

typedef struct _WebUIService WebUIService;
typedef struct _WebUIServiceClass WebUIServiceClass;
typedef struct _WebUIServicePrivate WebUIServicePrivate;
typedef struct _WebUIViewPrivate WebUIViewPrivate;

#define WEB_UI_TYPE_CONTAINER (web_ui_container_get_type ())
#define WEB_UI_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WEB_UI_TYPE_CONTAINER, WebUIContainer))
#define WEB_UI_IS_CONTAINER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WEB_UI_TYPE_CONTAINER))
#define WEB_UI_CONTAINER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), WEB_UI_TYPE_CONTAINER, WebUIContainerIface))

typedef struct _WebUIContainer WebUIContainer;
typedef struct _WebUIContainerIface WebUIContainerIface;

#define WEB_UI_TYPE_EVENT_TYPE (web_ui_event_type_get_type ())

struct _WebUIMouseEventsIface {
	GTypeInterface parent_iface;
	void (*attach_mouse_events) (WebUIMouseEvents* self);
};

struct _WebUIHTMLIface {
	GTypeInterface parent_iface;
	gchar* (*render) (WebUIHTML* self);
};

struct _WebUIEventTargetIface {
	GTypeInterface parent_iface;
	void (*emit) (WebUIEventTarget* self, const gchar* evt, const gchar* data);
};

struct _WebUIWidget {
	GObject parent_instance;
	WebUIWidgetPrivate * priv;
};

struct _WebUIWidgetClass {
	GObjectClass parent_class;
	gchar* (*render) (WebUIWidget* self);
	gchar* (*jsui_code) (WebUIWidget* self);
};

struct _WebUIButton {
	WebUIWidget parent_instance;
	WebUIButtonPrivate * priv;
};

struct _WebUIButtonClass {
	WebUIWidgetClass parent_class;
};

struct _WebUISlider {
	WebUIWidget parent_instance;
	WebUISliderPrivate * priv;
};

struct _WebUISliderClass {
	WebUIWidgetClass parent_class;
};

struct _WebUISwitch {
	WebUIWidget parent_instance;
	WebUISwitchPrivate * priv;
};

struct _WebUISwitchClass {
	WebUIWidgetClass parent_class;
};

struct _WebUIRange {
	WebUIWidget parent_instance;
	WebUIRangePrivate * priv;
};

struct _WebUIRangeClass {
	WebUIWidgetClass parent_class;
};

struct _WebUIGraph {
	WebUIWidget parent_instance;
	WebUIGraphPrivate * priv;
};

struct _WebUIGraphClass {
	WebUIWidgetClass parent_class;
};

typedef void (*WebUIRequestfinished_cb) (const gchar* data, void* user_data);
struct _WebUIRequest {
	GTypeInstance parent_instance;
	volatile int ref_count;
	WebUIRequestPrivate * priv;
	gint id;
	gchar* result;
	gboolean active;
	WebUIRequestfinished_cb func;
	gpointer func_target;
	GDestroyNotify func_target_destroy_notify;
};

struct _WebUIRequestClass {
	GTypeClass parent_class;
	void (*finalize) (WebUIRequest *self);
};

struct _WebUIConnection {
	GObject parent_instance;
	WebUIConnectionPrivate * priv;
	WebUIView* _view;
};

struct _WebUIConnectionClass {
	GObjectClass parent_class;
};

typedef void (*WebUIServiceconnection_func) (WebUIConnection* conn);
struct _WebUIDumbStruct {
	GTypeInstance parent_instance;
	volatile int ref_count;
	WebUIDumbStructPrivate * priv;
	WebUIServiceconnection_func func;
};

struct _WebUIDumbStructClass {
	GTypeClass parent_class;
	void (*finalize) (WebUIDumbStruct *self);
};

struct _WebUIService {
	GObject parent_instance;
	WebUIServicePrivate * priv;
};

struct _WebUIServiceClass {
	GObjectClass parent_class;
};

struct _WebUIView {
	GObject parent_instance;
	WebUIViewPrivate * priv;
};

struct _WebUIViewClass {
	GObjectClass parent_class;
};

struct _WebUIContainerIface {
	GTypeInterface parent_iface;
	void (*add) (WebUIContainer* self, WebUIWidget* w);
};

typedef enum  {
	WEB_UI_EVENT_TYPE_UNSUPPORTED,
	WEB_UI_EVENT_TYPE_CLICKED,
	WEB_UI_EVENT_TYPE_MOUSE_UP,
	WEB_UI_EVENT_TYPE_MOUSE_DOWN,
	WEB_UI_EVENT_TYPE_ACTIVATE,
	WEB_UI_EVENT_TYPE_CHANGED
} WebUIEventType;


GType web_ui_widget_get_type (void) G_GNUC_CONST;
GType web_ui_mouse_events_get_type (void) G_GNUC_CONST;
void web_ui_mouse_events_attach_mouse_events (WebUIMouseEvents* self);
GType web_ui_html_get_type (void) G_GNUC_CONST;
GType web_ui_event_target_get_type (void) G_GNUC_CONST;
GType web_ui_button_get_type (void) G_GNUC_CONST;
GType web_ui_view_get_type (void) G_GNUC_CONST;
WebUIButton* web_ui_button_new (WebUIView* view, const gchar* id);
WebUIButton* web_ui_button_construct (GType object_type, WebUIView* view, const gchar* id);
GType web_ui_slider_get_type (void) G_GNUC_CONST;
WebUISlider* web_ui_slider_new (WebUIView* view, const gchar* id);
WebUISlider* web_ui_slider_construct (GType object_type, WebUIView* view, const gchar* id);
GType web_ui_switch_get_type (void) G_GNUC_CONST;
WebUISwitch* web_ui_switch_new (WebUIView* view, const gchar* id);
WebUISwitch* web_ui_switch_construct (GType object_type, WebUIView* view, const gchar* id);
GType web_ui_range_get_type (void) G_GNUC_CONST;
WebUIRange* web_ui_range_new (WebUIView* view, const gchar* id);
WebUIRange* web_ui_range_construct (GType object_type, WebUIView* view, const gchar* id);
GType web_ui_graph_get_type (void) G_GNUC_CONST;
WebUIGraph* web_ui_graph_new (WebUIView* view, const gchar* id);
WebUIGraph* web_ui_graph_construct (GType object_type, WebUIView* view, const gchar* id);
gpointer web_ui_request_ref (gpointer instance);
void web_ui_request_unref (gpointer instance);
GParamSpec* web_ui_param_spec_request (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void web_ui_value_set_request (GValue* value, gpointer v_object);
void web_ui_value_take_request (GValue* value, gpointer v_object);
gpointer web_ui_value_get_request (const GValue* value);
GType web_ui_request_get_type (void) G_GNUC_CONST;
WebUIRequest* web_ui_request_new (gint id, WebUIRequestfinished_cb fun, void* fun_target);
WebUIRequest* web_ui_request_construct (GType object_type, gint id, WebUIRequestfinished_cb fun, void* fun_target);
void web_ui_request_complete (WebUIRequest* self, const gchar* res);
GType web_ui_connection_get_type (void) G_GNUC_CONST;
extern gint web_ui_connection__nxt_id;
gint web_ui_connection_next_id (void);
WebUIConnection* web_ui_connection_new (NeutronWebsocketConnection* conn, const gchar* route);
WebUIConnection* web_ui_connection_construct (GType object_type, NeutronWebsocketConnection* conn, const gchar* route);
void web_ui_connection_on_message (WebUIConnection* self, const gchar* message, NeutronWebsocketConnection* conn);
void web_ui_connection_response (WebUIConnection* self, gint id, const gchar* val);
void web_ui_connection_exec (WebUIConnection* self, const gchar* code);
void web_ui_connection_request (WebUIConnection* self, const gchar* what, WebUIRequestfinished_cb fun, void* fun_target);
NeutronWebsocketConnection* web_ui_connection_get_socket (WebUIConnection* self);
GeeHashMap* web_ui_connection_get_views (WebUIConnection* self);
GeeArrayList* web_ui_connection_get_requests (WebUIConnection* self);
const gchar* web_ui_connection_get_route (WebUIConnection* self);
void web_ui_connection_set_route (WebUIConnection* self, const gchar* value);
WebUIView* web_ui_connection_get_view (WebUIConnection* self);
void web_ui_connection_set_view (WebUIConnection* self, WebUIView* value);
gint web_ui_connection_get_id (WebUIConnection* self);
gpointer web_ui_dumb_struct_ref (gpointer instance);
void web_ui_dumb_struct_unref (gpointer instance);
GParamSpec* web_ui_param_spec_dumb_struct (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void web_ui_value_set_dumb_struct (GValue* value, gpointer v_object);
void web_ui_value_take_dumb_struct (GValue* value, gpointer v_object);
gpointer web_ui_value_get_dumb_struct (const GValue* value);
GType web_ui_dumb_struct_get_type (void) G_GNUC_CONST;
WebUIDumbStruct* web_ui_dumb_struct_new (WebUIServiceconnection_func fun);
WebUIDumbStruct* web_ui_dumb_struct_construct (GType object_type, WebUIServiceconnection_func fun);
GType web_ui_service_get_type (void) G_GNUC_CONST;
WebUIConnection* web_ui_service_get_connection (WebUIService* self, gint id);
WebUIService* web_ui_service_new (guint port, const gchar* data_dir);
WebUIService* web_ui_service_construct (GType object_type, guint port, const gchar* data_dir);
gchar* web_ui_service_get_mime_type (WebUIService* self, const gchar* ext);
gchar** web_ui_service_serve (WebUIService* self, gchar* path, int* result_length1);
void web_ui_service_handle (WebUIService* self, NeutronHttpRequest* request, NeutronHttpEntitySelectContainer* container);
gchar* web_ui_service_render_libwebui (WebUIService* self, const gchar* route);
void web_ui_service_route (WebUIService* self, const gchar* path, WebUIServiceconnection_func fun);
void web_ui_service_on_socket (WebUIService* self, const gchar* route, NeutronHttpEntitySelectContainer* container);
guint web_ui_service_get_port (WebUIService* self);
GeeHashMap* web_ui_service_get_routes (WebUIService* self);
const gchar* web_ui_service_get_data_dir (WebUIService* self);
NeutronHttpServer* web_ui_service_get_server (WebUIService* self);
GeeHashMap* web_ui_service_get_connections (WebUIService* self);
extern gint web_ui_view__nxt_id;
WebUIView* web_ui_view_new (WebUIConnection* conn, const gchar* id);
WebUIView* web_ui_view_construct (GType object_type, WebUIConnection* conn, const gchar* id);
gint web_ui_view_next_id (void);
void web_ui_view_own (WebUIView* self, WebUIWidget* w);
void web_ui_view_initialize (WebUIView* self);
WebUIWidget* web_ui_view_get_widget (WebUIView* self, const gchar* id);
gboolean web_ui_view_has_widget (WebUIView* self, const gchar* id);
void web_ui_view_add (WebUIView* self, WebUIWidget* w);
const gchar* web_ui_view_get_id (WebUIView* self);
WebUIWidget** web_ui_view_get_widgets (WebUIView* self, int* result_length1);
WebUIWidget** web_ui_view_get_children (WebUIView* self, int* result_length1);
WebUIConnection* web_ui_view_get_connection (WebUIView* self);
void web_ui_view_set_connection (WebUIView* self, WebUIConnection* value);
#define WEB_UI_VERSION "0.1.0"
gchar* web_ui_html_render (WebUIHTML* self);
GType web_ui_container_get_type (void) G_GNUC_CONST;
void web_ui_container_add (WebUIContainer* self, WebUIWidget* w);
GType web_ui_event_type_get_type (void) G_GNUC_CONST;
WebUIEventType web_ui_event_type_from_string (const gchar* name);
void web_ui_event_target_emit (WebUIEventTarget* self, const gchar* evt, const gchar* data);
void web_ui_widget_set_container (WebUIWidget* self, WebUIContainer* container);
void web_ui_widget_read_property (WebUIWidget* self, const gchar* prop);
void web_ui_widget_write_string_property (WebUIWidget* self, const gchar* prop, const gchar* val);
WebUIWidget* web_ui_widget_new (WebUIView* view, const gchar* id);
WebUIWidget* web_ui_widget_construct (GType object_type, WebUIView* view, const gchar* id);
gchar* web_ui_widget_get_style_property (WebUIWidget* self, const gchar* name);
void web_ui_widget_set_style_property (WebUIWidget* self, const gchar* name, const gchar* val);
gchar* web_ui_widget_style (WebUIWidget* self, const gchar* name, gchar* val);
gchar* web_ui_widget_render (WebUIWidget* self);
gchar* web_ui_widget_jsui_code (WebUIWidget* self);
const gchar* web_ui_widget_get_id (WebUIWidget* self);
WebUIConnection* web_ui_widget_get_socket (WebUIWidget* self);
WebUIView* web_ui_widget_get_view (WebUIWidget* self);
WebUIContainer* web_ui_widget_get_parent (WebUIWidget* self);


G_END_DECLS

#endif
